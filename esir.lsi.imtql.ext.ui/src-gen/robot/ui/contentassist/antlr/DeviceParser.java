/*
* generated by Xtext
*/
package robot.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import robot.services.DeviceGrammarAccess;

public class DeviceParser extends AbstractContentAssistParser {
	
	@Inject
	private DeviceGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected robot.ui.contentassist.antlr.internal.InternalDeviceParser createParser() {
		robot.ui.contentassist.antlr.internal.InternalDeviceParser result = new robot.ui.contentassist.antlr.internal.InternalDeviceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFonctionnaliteAccess().getAlternatives(), "rule__Fonctionnalite__Alternatives");
					put(grammarAccess.getObjectAccess().getAlternatives(), "rule__Object__Alternatives");
					put(grammarAccess.getTypesAccess().getGroup(), "rule__Types__Group__0");
					put(grammarAccess.getTypesAccess().getGroup_1(), "rule__Types__Group_1__0");
					put(grammarAccess.getDeviceAccess().getGroup(), "rule__Device__Group__0");
					put(grammarAccess.getDeviceAccess().getGroup_3(), "rule__Device__Group_3__0");
					put(grammarAccess.getParametreAccess().getGroup(), "rule__Parametre__Group__0");
					put(grammarAccess.getCaptureAccess().getGroup(), "rule__Capture__Group__0");
					put(grammarAccess.getCaptureAccess().getGroup_4(), "rule__Capture__Group_4__0");
					put(grammarAccess.getCaptureAccess().getGroup_4_1(), "rule__Capture__Group_4_1__0");
					put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
					put(grammarAccess.getActionAccess().getGroup_4(), "rule__Action__Group_4__0");
					put(grammarAccess.getActionAccess().getGroup_4_2(), "rule__Action__Group_4_2__0");
					put(grammarAccess.getTypesAccess().getTypesAssignment_0(), "rule__Types__TypesAssignment_0");
					put(grammarAccess.getTypesAccess().getTypesAssignment_1_1(), "rule__Types__TypesAssignment_1_1");
					put(grammarAccess.getDeviceAccess().getNameAssignment_1(), "rule__Device__NameAssignment_1");
					put(grammarAccess.getDeviceAccess().getRefFonctionAssignment_3_0(), "rule__Device__RefFonctionAssignment_3_0");
					put(grammarAccess.getParametreAccess().getTypeAssignment_1(), "rule__Parametre__TypeAssignment_1");
					put(grammarAccess.getParametreAccess().getNameAssignment_3(), "rule__Parametre__NameAssignment_3");
					put(grammarAccess.getCaptureAccess().getNameAssignment_2(), "rule__Capture__NameAssignment_2");
					put(grammarAccess.getCaptureAccess().getListeParametresAssignment_4_0(), "rule__Capture__ListeParametresAssignment_4_0");
					put(grammarAccess.getCaptureAccess().getListeParametresAssignment_4_1_1(), "rule__Capture__ListeParametresAssignment_4_1_1");
					put(grammarAccess.getActionAccess().getReturnAssignment_2(), "rule__Action__ReturnAssignment_2");
					put(grammarAccess.getActionAccess().getNameAssignment_3(), "rule__Action__NameAssignment_3");
					put(grammarAccess.getActionAccess().getListeParametresAssignment_4_1(), "rule__Action__ListeParametresAssignment_4_1");
					put(grammarAccess.getActionAccess().getListeParametresAssignment_4_2_1(), "rule__Action__ListeParametresAssignment_4_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			robot.ui.contentassist.antlr.internal.InternalDeviceParser typedParser = (robot.ui.contentassist.antlr.internal.InternalDeviceParser) parser;
			typedParser.entryRuleTypes();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DeviceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DeviceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
