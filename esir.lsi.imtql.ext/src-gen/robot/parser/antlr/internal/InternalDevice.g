/*
* generated by Xtext
*/
grammar InternalDevice;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package robot.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package robot.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import robot.services.DeviceGrammarAccess;

}

@parser::members {

 	private DeviceGrammarAccess grammarAccess;
 	
    public InternalDeviceParser(TokenStream input, DeviceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Types";	
   	}
   	
   	@Override
   	protected DeviceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTypes
entryRuleTypes returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypesRule()); }
	 iv_ruleTypes=ruleTypes 
	 { $current=$iv_ruleTypes.current; } 
	 EOF 
;

// Rule Types
ruleTypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypesAccess().getTypesDeviceParserRuleCall_0_0()); 
	    }
		lv_Types_0_0=ruleDevice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypesRule());
	        }
       		add(
       			$current, 
       			"Types",
        		lv_Types_0_0, 
        		"Device");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypesAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypesAccess().getTypesDeviceParserRuleCall_1_1_0()); 
	    }
		lv_Types_2_0=ruleDevice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypesRule());
	        }
       		add(
       			$current, 
       			"Types",
        		lv_Types_2_0, 
        		"Device");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDevice
entryRuleDevice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeviceRule()); }
	 iv_ruleDevice=ruleDevice 
	 { $current=$iv_ruleDevice.current; } 
	 EOF 
;

// Rule Device
ruleDevice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Device' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeviceAccess().getDeviceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDeviceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeviceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDeviceAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeviceAccess().getRefFonctionFonctionnaliteParserRuleCall_3_0_0()); 
	    }
		lv_refFonction_3_0=ruleFonctionnalite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeviceRule());
	        }
       		add(
       			$current, 
       			"refFonction",
        		lv_refFonction_3_0, 
        		"Fonctionnalite");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDeviceAccess().getSemicolonKeyword_3_1());
    }
)+	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDeviceAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFonctionnalite
entryRuleFonctionnalite returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFonctionnaliteRule()); }
	 iv_ruleFonctionnalite=ruleFonctionnalite 
	 { $current=$iv_ruleFonctionnalite.current; } 
	 EOF 
;

// Rule Fonctionnalite
ruleFonctionnalite returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFonctionnaliteAccess().getCaptureParserRuleCall_0()); 
    }
    this_Capture_0=ruleCapture
    { 
        $current = $this_Capture_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFonctionnaliteAccess().getActionParserRuleCall_1()); 
    }
    this_Action_1=ruleAction
    { 
        $current = $this_Action_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEJavaObject
entryRuleEJavaObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEJavaObjectRule()); }
	 iv_ruleEJavaObject=ruleEJavaObject 
	 { $current=$iv_ruleEJavaObject.current; } 
	 EOF 
;

// Rule EJavaObject
ruleEJavaObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getEJavaObjectAccess().getObjectAction(),
            $current);
    }
)
;







// Entry rule entryRuleParametre
entryRuleParametre returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParametreRule()); }
	 iv_ruleParametre=ruleParametre 
	 { $current=$iv_ruleParametre.current; } 
	 EOF 
;

// Rule Parametre
ruleParametre returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParametreAccess().getParametreAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParametreAccess().getTypeEJavaObjectParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleEJavaObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParametreRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"EJavaObject");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='#' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParametreAccess().getNumberSignKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getParametreAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParametreRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleCapture
entryRuleCapture returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaptureRule()); }
	 iv_ruleCapture=ruleCapture 
	 { $current=$iv_ruleCapture.current; } 
	 EOF 
;

// Rule Capture
ruleCapture returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCaptureAccess().getCaptureAction_0(),
            $current);
    }
)	otherlv_1='capture' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCaptureAccess().getCaptureKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getCaptureAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCaptureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCaptureAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCaptureAccess().getListeParametresParametreParserRuleCall_4_0_0()); 
	    }
		lv_ListeParametres_4_0=ruleParametre		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaptureRule());
	        }
       		add(
       			$current, 
       			"ListeParametres",
        		lv_ListeParametres_4_0, 
        		"Parametre");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCaptureAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaptureAccess().getListeParametresParametreParserRuleCall_4_1_1_0()); 
	    }
		lv_ListeParametres_6_0=ruleParametre		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaptureRule());
	        }
       		add(
       			$current, 
       			"ListeParametres",
        		lv_ListeParametres_6_0, 
        		"Parametre");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCaptureAccess().getRightParenthesisKeyword_4_2());
    }
)?)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionAccess().getActionAction_0(),
            $current);
    }
)	otherlv_1='action' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActionAccess().getActionKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getReturnEJavaObjectParserRuleCall_2_0()); 
	    }
		lv_return_2_0=ruleEJavaObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_2_0, 
        		"EJavaObject");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getActionAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getActionAccess().getLeftParenthesisKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getListeParametresParametreParserRuleCall_4_1_0()); 
	    }
		lv_ListeParametres_5_0=ruleParametre		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		add(
       			$current, 
       			"ListeParametres",
        		lv_ListeParametres_5_0, 
        		"Parametre");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getActionAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getListeParametresParametreParserRuleCall_4_2_1_0()); 
	    }
		lv_ListeParametres_7_0=ruleParametre		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		add(
       			$current, 
       			"ListeParametres",
        		lv_ListeParametres_7_0, 
        		"Parametre");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getActionAccess().getRightParenthesisKeyword_4_3());
    }
)?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


